
@{
    ViewBag.Title = "OrderDetail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@section slider{
    <!-- Header Banner -->
    <div class="banner-header section-padding valign bg-img bg-fixed" data-overlay-dark="4" data-background="/Content/img/slider/1.jpg">
        <div class="container">
            <div class="row">
                <div class="col-md-12 caption mt-90">
                    <h5>The Jocasta Mai Linh Hotel</h5>
                    <h1>Order Detail</h1>
                </div>
            </div>
            <div class="row sub-banner">
                <ul>
                    <li>
                        <a href="/">Home</a>
                    </li>
                    <li>
                        <a class="select" href="">OrderDetail</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
}

<!-- Your room -->
<section class="section-padding">
    <div class="container">
        <h3 class="title">Chi tiết đơn đặt của bạn</h3>
        <div class="user-info row">
            <div class="col-md-6">
                <div class="item user-name">
                    <strong class="text">Người nhận phòng: </strong>
                    <span class="value"></span>
                </div>
                <div class="item user-phone">
                    <strong class="text">Điện thoại: </strong>
                    <span class="value"></span>
                </div>
                <div class="item user-email">
                    <strong class="text">Email: </strong>
                    <span class="value"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="item check-in">
                    <strong class="text">Check in: </strong>
                    <span class="value"></span>
                </div>
                <div class="item check-out">
                    <strong class="text">Check out: </strong>
                    <span class="value"></span>
                </div>
                <div class="item user-time">
                    <strong class="text">Ngày đặt: </strong>
                    <span class="value"></span>
                </div>
            </div>
        </div>

        <div class="list-room">
            <h6>Các phòng bạn đã đặt: </h6>
            <table>
                <tbody id="list-room-booked"></tbody>
            </table>
        </div>

        <div class="list-service">
            <h6>Các dịch vụ bạn đã đặt: </h6>
            <table>
                <thead>
                    <tr>
                        <th>Dịch vụ</th>
                        <th>Số lượng</th>
                        <th>Tiền dịch vụ</th>
                        <th>Ngày đặt</th>
                    </tr>
                </thead>
                <tbody id="list-service-invoice"></tbody>
            </table>
        </div>

        <div class="total-price">
            <h6>Tổng tiền: <span id="total-price">8.048.000</span> VNĐ</h6>
        </div>
        <div class="button-booked">
            <button id="btn-service" class="btn btn-primary" onclick="orderService_onClick();">Đặt dịch vụ</button>
            <button id="btn-cancel" class="btn btn-danger" onclick="userCancel_onClick();">Hủy</button>
        </div>
    </div>
</section>

<div class="modal" id="order-service">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Đặt dịch vụ</h2>
            <button type="button" onclick="CloseModal_onClick();">
            </button>
        </div>
        <div class="modal-body">
            <div class="row">
                <div class="form-group col-md-6 mb-0">
                    <label class="font-weight-semibold fs-16" for="service">Tên dịch vụ</label>
                    <select class="form-control" id="Service" name="Service">
                        <option value="">Chọn dịch vụ</option>
                    </select>
                </div>

                <div class="form-group col-md-6 mb-0">
                    <label class="font-weight-semibold fs-16" for="quantity">Số lượng</label>
                    <input type="text" class="form-control" id="Quantity" placeholder="Nhập số lượng" onkeyup="ValidateInputOnlyNumber(event,this)" required>
                </div>

                @*<div class="form-group col-md-12 mb-0">
                        <label class="font-weight-semibold fs-16" for="request">Nội dung yêu cầu</label>
                        <textarea class="form-control" aria-label="With textarea" style="resize:none;" placeholder="Nhập nội dung" rows="2" id="Request"></textarea>
                    </div>*@

            </div>
            <div><button class="btn btn-success" onclick="AddService_onClick();">Thêm</button></div>
            <div class="service-booked">
                <table>
                    <thead>
                        <tr>
                            <th style="width: 30%;">Dịch vụ</th>
                            <th>Số lượng</th>
                            <th>Tiền dịch vụ</th>
                            @* <th style="width: 45%;">Nội dung yêu cầu</th>*@
                            <th style="width: 7%;"></th>
                        </tr>
                    </thead>
                    <tbody id="list-service-booked">
                    </tbody>
                </table>
            </div>
            <div>Tổng tiền: <span id="totalPriceServiceOrder">0</span> VNĐ</div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger light" data-bs-dismiss="modal" onclick="CloseModal_onClick();">Đóng</button>
            <button type="button" class="btn btn-primary" onclick="SaveService_onClick();">Lưu</button>
        </div>
    </div>
</div>



@section styles{
    <style>

        .title {
            color: #aa8453;
        }

        .user-info {
        }

            .user-info .item {
                line-height: 3;
            }

        /*.section-padding .container {
            width: 60% !important;
            margin: auto;
        }
*/
        .list-room {
            margin-top: 20px;
        }

            .list-room table {
                width: 100%;
                margin: auto;
            }

                .list-room table tbody {
                    font-size: 15px;
                }

        #list-room-booked td img {
            width: 80px;
            height: 60px;
        }

        #list-room-booked td {
            border: none;
        }

            #list-room-booked td .room-price {
                padding-top: 10px;
            }

        .button-booked {
            float: right;
            margin: 20px;
        }

            .button-booked > button {
                margin-left: 15px;
                display: none;
            }

        #order-service {
            display: none;
            position: fixed;
            background-color: #00000060;
            top: 0;
            left: 0;
            z-index: 1055;
            width: 100%;
            height: 100%;
            overflow-x: hidden;
            overflow-y: auto;
            outline: 0;
        }

            #order-service .modal-content {
                height: 700px;
                width: 700px;
                margin: auto;
            }

        .modal-body .service-booked {
            width: 100%;
            margin-top: 15px;
        }

            .modal-body .service-booked table {
                width: 100%;
            }

        .modal-body #Quantity {
            display: block;
            width: 100%;
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
        }

        .container .list-service {
            padding-top: 20px;
        }

        .list-service table {
            width: 100%;
            margin: auto;
        }

        .container .total-price {
            margin-top: 20px;
            display: flex;
            justify-content: flex-end;
        }
    </style>
}

@section scripts{
    <script>
        const orderId = "@ViewBag.Id";

        const getOrderById = async function () {
            let rq = await fetch('/api/order/GetOrderById?id=' + orderId, {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.user-info .user-name .value').html(GetObjectProperty(rs.data, 'Name'));
                $('.user-info .user-phone .value').html(GetObjectProperty(rs.data, 'Phone'));
                $('.user-info .user-email .value').html(GetObjectProperty(rs.data, 'Email'));
                $('.user-info .user-time .value').html(DateStringFormat({ stringDate: new Date(rs.data.CreateTime), newFormat: 'mm/dd/yyyy' }));
                $('.user-info .check-in .value').html(DateStringFormat({ stringDate: new Date(rs.data.CheckIn), newFormat: 'mm/dd/yyyy' }));
                $('.user-info .check-out .value').html(DateStringFormat({ stringDate: new Date(rs.data.CheckOut), newFormat: 'mm/dd/yyyy' }));
                $('#total-price').html(NumberFormat(rs.data.TotalPrice));

                if (GetObjectProperty(rs.data, 'Status') == 'BOOKED') {
                    $('#btn-cancel').css('display', 'block');
                }

                else if (GetObjectProperty(rs.data, 'Status') == 'CHECKED_IN') {
                    $('#btn-service').css('display', 'block');
                }
            }
        }

        const getListRoomBooked = async function () {
            let rq = await fetch('/api/invoice/GetListRoomBooked?orderId=' + orderId, {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;
            console.log(rs.data)
            $('#list-room-booked').html('');

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                let html = '';
                for (let i = 0; i < rs.data.length; i++) {
                    html += `<tr>`
                    html += `<td style="width: 80px;"><img src="${rs.data[i].Image}" alt=""></td>`;
                    html += `<td><div>${GetObjectProperty(rs.data[i], 'Name')}</div><div class="room-price">Giá: ${(NumberFormat(rs.data[i].Price))} VNĐ/Đêm</div></td>`;
                    html += `<td style="width:150px;"><div>Số lượng: ${GetObjectProperty(rs.data[i], 'Quantity')}</div></td>`;
                    html += `</tr>`;
                }
                $('#list-room-booked').append(html);

            }
        }

        const getListServiceBooked = async function () {
            let rq = await fetch('/api/invoice/GetListServiceBooked?orderId=' + orderId, {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;
            console.log(rs.data)
            $('#list-service-invoice').html('');

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                let html = '';
                for (let i = 0; i < rs.data.length; i++) {
                    html += `<tr>`;
                    html += `<td>${GetObjectProperty(rs.data[i], 'Name')}</td>`;
                    html += `<td>${(NumberFormat(rs.data[i].Price))} VNĐ</td>`;
                    html += `<td>${GetObjectProperty(rs.data[i], 'Quantity')}</td>`;
                    html += `<td>${DateStringFormat({ stringDate: new Date(rs.data[i].CreateTime), newFormat: 'dd/mm/yyyy hh:mi:ss' }) }</td>`;
                    html += `</tr>`;
                }
                $('#list-service-invoice').append(html);

            }
        }

        const userCancel_onClick = async function () {
            let rq = await fetch('/api/order/UserCancelOrder?orderId=' + orderId, {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                window.location.href = '/user/list-order';
            }
        }

        const orderService_onClick = function () {
            $('#order-service').css('display', 'flex');
        }

        const getListService = async function () {
            let rq = await fetch('/api/service/GetListService', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;

            $('[name=Service]').html('');
            let html = '<option value="">Chọn dịch vụ</option>';
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                for (let i = 0; i < rs.data.length; i++) {
                    html += `<option value="${rs.data[i].ServiceId}" data-price="${rs.data[i].Price}">${rs.data[i].Name}</option>`;
                }
            }

            $('[name=Service]').append(html);
        }

        /* Đặt dịch vụ */
        let modelService = [];
        let totalPriceOrderService = 0;

        const AddService_onClick = function () {
            let model = {
                Service: $('select[name=Service]').val(),
                ServiceName: $('#Service').find(':selected').text(),
                Quantity: $('#Quantity').val(),
                Price: $('#Service').find(':selected').data('price')
            }

            console.log(model);

            if (GetObjectProperty(model,'Service') === '') { alert('Bạn chưa chọn dịch vụ.'); return; }
            if (GetObjectProperty(model, 'Quantity') === '') { alert('Số lượng không được để trống'); return; }

            // Kiểm tra xem có service này chưa
            let checkService = modelService.some(s => s.ServiceId === model.Service);
            console.log(checkService);
            let serviceOrder = {
                ServiceId: model.Service,
                Quantity: parseInt(model.Quantity),
                Price: parseFloat(model.Price)
            }
            if (checkService === false) {
                modelService.push(serviceOrder);
                totalPriceOrderService += parseInt(model.Quantity) * parseFloat(model.Price);
                let html = `<tr class="item-service item-id-${model.Service}" data-id="${model.Service}" onclick="ServiceOrder_onClick();">`;
                html += '<td><input value="' + model.Service + '" hidden />' + model.ServiceName + '</td>';
                html += '<td>' + model.Quantity + '</td>';
                html += '<td>' + NumberFormat(model.Price) + '</td>';
                html += '<td class="text-center" style="width:100px;"><input type="hidden" name="serviceid"/><button onclick="DeleteService(this);" class="btn btn-outline-danger btn-xs"><i class="fas fa-trash"></i></button></td>';

                $('#list-service-booked').append(html);
                $('#totalPriceServiceOrder').text(NumberFormat(totalPriceOrderService));
            }
            else {
                let service = modelService.findIndex((obj => obj.ServiceId == model.Service));
                modelService[service].Quantity = parseInt(modelService[service].Quantity) + parseInt(model.Quantity);
                totalPriceOrderService += parseInt(model.Quantity) * parseFloat(model.Price);
                $(`.item-id-${model.Service}`).replaceWith(`
                    <tr class="item-service item-id-${model.Service}" data-id="${model.Service}" onclick="ServiceOrder_onClick();">
                      <td><input value="${model.Service}" hidden /> ${model.ServiceName} </td>
                      <td> ${modelService[service].Quantity} </td>
                      <td> ${NumberFormat(model.Price)}</td>';
                      <td class="text-center" style="width:100px;"><input type="hidden" name="serviceid"/><button onclick="DeleteService(this);" class="btn btn-outline-danger btn-xs"><i class="fas fa-trash"></i></button></td>
                    </tr>`);
                $('#totalPriceServiceOrder').text(NumberFormat(totalPriceOrderService));
            }

            console.log(modelService);
        }

        const ServiceOrder_onClick = function () {

        }

        const DeleteService = function (el) {
            $(el).closest('tr').remove();
            var id = $(el).closest('tr').data("id");
            let service = modelService.findIndex((obj => obj.ServiceId == id));
            console.log(modelService[service])
            totalPriceOrderService -= parseInt(modelService[service].Quantity) * parseFloat(modelService[service].Price);
            modelService = modelService.filter(item => item !== modelService[service]);
            $('#totalPriceServiceOrder').text(NumberFormat(totalPriceOrderService));
            console.log(modelService);
        }

        const CloseModal_onClick = function () {
            $('#order-service').css('display', 'none');
        }

        const SaveService_onClick = async function () {
            if (modelService.length <= 0) {
                alert("Bạn phải chọn dịch vụ");
                return;
            }

            let model = {
                Invoices: modelService,
                OrderId: orderId,
                TotalPrice: totalPriceOrderService
            }

            console.log(model);

            const rp = await fetch('/api/Invoice/CreateInvoiceService', {
                method: 'post',
                headers: Enum.OptionHeaderDefault,
                body: JSON.stringify(model)
            });
            let rs = await rp.json();

            if (CheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                $('#order-service').css('display', 'none');
                getListServiceBooked();
                getOrderById();
            }

        }

        const initPage = async function () {
            await getOrderById();
            await getListRoomBooked();
            await getListServiceBooked();
            await getListService();
        }

        initPage();

    </script>
}

